


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ExpEval, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000 E3A0600A        LDR              R6, =10     ; fixed value of 10
                                                             used when adding i
                                                            n a new number
   10 00000004 E3A04000        LDR              R4, =0      ; where the number 
                                                            being worked on is 
                                                            stored
   11 00000008 E3A07030        LDR              R7, =0x30   ; ascii code for 0
   12 0000000C E3A0C000        LDR              R12, =0     ; stores pending op
                                                            eration
   13 00000010 E3A05000        LDR              R5, =0      ; total / end resul
                                                            t
   14 00000014         
   15 00000014         
   16 00000014         read
   17 00000014 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   18 00000018 E35C000D        CMP              R12, #0x0D  ; if (enter is the 
                                                            pending operation)
   19 0000001C 0A00002B        BEQ              endcode     ; jump to end of th
                                                            e code
   20 00000020 E350000D        CMP              R0, #0x0D   ; if (enter is pres
                                                            sed by the user)
   21 00000024 0A00000F        BEQ              endRead     ; finished reading 
                                                            numbers
   22 00000028 EBFFFFFE        BL               sendchar    ; display number in
                                                             r0 to the console
   23 0000002C         
   24 0000002C E350002B        CMP              R0, #0x2B   ; if(+ pressed)
   25 00000030 0A00000C        BEQ              firstnumbercheck ;
   26 00000034 E350002D        CMP              R0, #0x2D   ; if(- pressed)
   27 00000038 0A00000A        BEQ              firstnumbercheck ;
   28 0000003C E350002A        CMP              R0, #0x2A   ; if(* pressed)
   29 00000040 0A000008        BEQ              firstnumbercheck ; 
   30 00000044         
   31 00000044         
   32 00000044 E3540000        CMP              R4, #0      ; while (number bei
                                                            ng worked on != 0)
   33 00000048 0A000000        BEQ              firstnumber ; {     
   34 0000004C EA000001        B                addnumber   ; go to add number 
                                                            function
   35 00000050         ; }
   36 00000050         ; else
   37 00000050         ; {
   38 00000050         ;  this is the first number being worked on
   39 00000050         ; }
   40 00000050         
   41 00000050         
   42 00000050         firstnumber
   43 00000050 E0404007        SUB              R4, R0, R7  ;  converts user in
                                                            put to decimal and 
                                                            makes the result 



ARM Macro Assembler    Page 2 


   44 00000054 EAFFFFEE        B                read        ;    into the new n
                                                            umber being worked 
                                                            on
   45 00000058         
   46 00000058         addnumber
   47 00000058 E00B0694        MUL              R11, R4, R6 ; takes the existin
                                                            g number and multip
                                                            lies it by 10 store
                                                            s it in temp locati
                                                            on
   48 0000005C E0404007        SUB              R4, R0, R7  ;  converts new num
                                                            ber to decimal
   49 00000060 E08B4004        ADD              R4, R11, R4 ; adds new number a
                                                            nd number in temp l
                                                            ocation
   50 00000064         
   51 00000064 EAFFFFEA        B                read
   52 00000068         
   53 00000068         endRead
   54 00000068         
   55 00000068         
   56 00000068         
   57 00000068         firstnumbercheck
   58 00000068 E35C0000        CMP              R12, #0     ; if (this is the f
                                                            irst number)
   59 0000006C 1A000003        BNE              operationchecker ;
   60 00000070         ; {
   61 00000070 E0845005        ADD              R5, R4, R5  ;  total = new numb
                                                            er
   62 00000074 E1A0C000        MOV              R12, R0     ;  pending operatio
                                                            n = user entered op
                                                            eration
   63 00000078 E3A04000        LDR              R4, =0      ;  number being wor
                                                            ked on = 0
   64 0000007C         ;  }
   65 0000007C         ;  else
   66 0000007C         ;  {
   67 0000007C         ;  check what operation we should be doing
   68 0000007C         ;  }
   69 0000007C EAFFFFE4        B                read
   70 00000080         
   71 00000080         operationchecker
   72 00000080 E35C002B        CMP              R12, #0x2B  ; plus
   73 00000084 0A000005        BEQ              addition
   74 00000088 E35C002D        CMP              R12, #0x2D  ; minus
   75 0000008C 0A000007        BEQ              subtraction
   76 00000090 E35C002A        CMP              R12, #0x2A  ; multiply
   77 00000094 0A000009        BEQ              multiplication
   78 00000098 E35C000D        CMP              R12, #0x0D  ; enter
   79 0000009C 0A00000B        BEQ              endcode
   80 000000A0         
   81 000000A0         addition
   82 000000A0 E0855004        ADD              R5, R5, R4  ; total = total + n
                                                            umber being worked 
                                                            on
   83 000000A4 E3A04000        LDR              R4, =0      ; number being work
                                                            ed on = 0
   84 000000A8 E1A0C000        MOV              R12, R0     ; put operation in 
                                                            r0



ARM Macro Assembler    Page 3 


   85 000000AC EAFFFFD8        B                read
   86 000000B0         
   87 000000B0         subtraction
   88 000000B0 E0455004        SUB              R5, R5, R4  ; total = total - n
                                                            umber being worked 
                                                            on
   89 000000B4 E3A04000        LDR              R4, =0      ; number being work
                                                            ed on = 0
   90 000000B8 E1A0C000        MOV              R12, R0     ; put operation in 
                                                            r0
   91 000000BC EAFFFFD4        B                read
   92 000000C0         
   93 000000C0         multiplication
   94 000000C0 E0050594        MUL              R5, R4, R5  ; total = total * n
                                                            umber being worked 
                                                            on
   95 000000C4 E3A04000        LDR              R4, =0      ; number being work
                                                            ed on = 0
   96 000000C8 E1A0C000        MOV              R12, R0     ; put operation in 
                                                            r0
   97 000000CC EAFFFFD0        B                read
   98 000000D0         
   99 000000D0         
  100 000000D0         endcode
  101 000000D0         
  102 000000D0         
  103 000000D0 EAFFFFFE 
                       stop    B                stop
  104 000000D4         
  105 000000D4                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\e
xpeval.d -o.\expeval.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include
 -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROL
IB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP
 SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pr
edefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\expeval.lst ExpEv
al.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ExpEval 00000000

Symbol: ExpEval
   Definitions
      At line 1 in file ExpEval.s
   Uses
      None
Comment: ExpEval unused
addition 000000A0

Symbol: addition
   Definitions
      At line 81 in file ExpEval.s
   Uses
      At line 73 in file ExpEval.s
Comment: addition used once
addnumber 00000058

Symbol: addnumber
   Definitions
      At line 46 in file ExpEval.s
   Uses
      At line 34 in file ExpEval.s
Comment: addnumber used once
endRead 00000068

Symbol: endRead
   Definitions
      At line 53 in file ExpEval.s
   Uses
      At line 21 in file ExpEval.s
Comment: endRead used once
endcode 000000D0

Symbol: endcode
   Definitions
      At line 100 in file ExpEval.s
   Uses
      At line 19 in file ExpEval.s
      At line 79 in file ExpEval.s

firstnumber 00000050

Symbol: firstnumber
   Definitions
      At line 42 in file ExpEval.s
   Uses
      At line 33 in file ExpEval.s
Comment: firstnumber used once
firstnumbercheck 00000068

Symbol: firstnumbercheck
   Definitions
      At line 57 in file ExpEval.s
   Uses
      At line 25 in file ExpEval.s
      At line 27 in file ExpEval.s
      At line 29 in file ExpEval.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

multiplication 000000C0

Symbol: multiplication
   Definitions
      At line 93 in file ExpEval.s
   Uses
      At line 77 in file ExpEval.s
Comment: multiplication used once
operationchecker 00000080

Symbol: operationchecker
   Definitions
      At line 71 in file ExpEval.s
   Uses
      At line 59 in file ExpEval.s
Comment: operationchecker used once
read 00000014

Symbol: read
   Definitions
      At line 16 in file ExpEval.s
   Uses
      At line 44 in file ExpEval.s
      At line 51 in file ExpEval.s
      At line 69 in file ExpEval.s
      At line 85 in file ExpEval.s
      At line 91 in file ExpEval.s
      At line 97 in file ExpEval.s

start 00000000

Symbol: start
   Definitions
      At line 8 in file ExpEval.s
   Uses
      At line 5 in file ExpEval.s
Comment: start used once
stop 000000D0

Symbol: stop
   Definitions
      At line 103 in file ExpEval.s
   Uses
      At line 103 in file ExpEval.s
Comment: stop used once
subtraction 000000B0

Symbol: subtraction
   Definitions
      At line 87 in file ExpEval.s
   Uses
      At line 75 in file ExpEval.s
Comment: subtraction used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file ExpEval.s
   Uses
      At line 17 in file ExpEval.s
Comment: getkey used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file ExpEval.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file ExpEval.s
   Uses
      At line 22 in file ExpEval.s
Comment: sendchar used once
3 symbols
354 symbols in table
