


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             FpAdd, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000         
    7 00000000         ;
    8 00000000         ; Part 1 - decode
    9 00000000         ;
   10 00000000         
   11 00000000 E3A0043F        LDR              r0, =0x3F000000 ; fpval1 = 0.5
   12 00000004 E59F1310        LDR              r1, =0x3EE00000 
                                                            ; fpval2 = 0.4375
   13 00000008         
   14 00000008 E3A0043F        LDR              r0, =0x3F000000 ; fpval1 = 0.5 
                                                            result 1 = 0x3f8000
                                                            00
   15 0000000C E3A0143F        LDR              r1, =0x3F000000 ; fpval2 = 0.5
   16 00000010         
   17 00000010 E3A005FF        LDR              r0, =0x3FC00000 ; fpval1 = 1.5
   18 00000014 E59F1304        LDR              r1, =0x40100000 ; fpval2 = 2.25
                                                              result 3.75 =  0x
                                                            40700000
   19 00000018         
   20 00000018 E3A004BF        LDR              r0, =0xBF000000 ; fpval1 = -0.5
                                                              result -0.9375 = 
                                                            0xbf700000
   21 0000001C E59F1300        LDR              r1, =0xBEE00000 
                                                            ; fpval2 = -0.4375
   22 00000020         
   23 00000020 E3A0043F        LDR              r0, =0x3F000000 ; fpval1 = 0.5 
                                                               result 0.0625 = 
                                                            0x3d800000
   24 00000024 E59F12F8        LDR              r1, =0xBEE00000 
                                                            ; fpval2 = -0.4375
   25 00000028         
   26 00000028 E59F02F8        LDR              R0, =0xC0100000 ; fpval1 = -2.2
                                                            5    result -0.75 =
                                                             0xBF400000
   27 0000002C E3A015FF        LDR              R1, =0x3FC00000 
                                                            ; fpval1 = 1.5  
   28 00000030         
   29 00000030 E59F02F4        LDR              R0, =0x414E0000 ; fpval1 = 12.8
                                                            75   result -17.5 =
                                                            0xC18C0000
   30 00000034 E59F12F4        LDR              R1, =0xC1F30000 ; fpval1 = -30.
                                                            375  
   31 00000038         
   32 00000038 E3A0043F        LDR              r0, =0x3F000000 ; fpval1 = 0.5 
                                                               result 0 = 0x000
                                                            00000
   33 0000003C E3A014BF        LDR              r1, =0xbf000000 ; fpval2 = -0.5
                                                            
   34 00000040         
   35 00000040 E59F02EC        LDR              R0, =0x40133333 ; fpval1 = 2.3 
                                                             result 1.8 = 0x3FE
                                                            66666
   36 00000044 E3A014BF        LDR              R1, =0xbf000000 ; fpval2 = -0.5
                                                            



ARM Macro Assembler    Page 2 


   37 00000048         
   38 00000048 EB000000        BL               fpadd
   39 0000004C         
   40 0000004C EAFFFFFE 
                       stop    B                stop
   41 00000050         
   42 00000050         ; fpadd subroutine
   43 00000050         ; Adds two IEEE754 single precision floating point value
                       s
   44 00000050         ; Parameters:
   45 00000050         ;   R0: first floating point value
   46 00000050         ;   R1: second floating point value
   47 00000050         ; Return value:
   48 00000050         ;   R0: floating point result
   49 00000050         ;
   50 00000050         fpadd
   51 00000050 E92D43F0        STMFD            SP!, {R4-R9 ,lr}
   52 00000054 E1A04000        MOV              R4, R0      ;      storing away
                                                             floating point num
                                                            bers
   53 00000058 E1A05001        MOV              R5, R1      ;
   54 0000005C EB000026        BL               getComponents
   55 00000060 E1A09003        MOV              R9, R3      ;      store away r
                                                            esult for use later
                                                            
   56 00000064 E1A04000        MOV              R4, R0      ;      
   57 00000068 E1A05001        MOV              R5, R1      ;
   58 0000006C E3530001        CMP              R3, #1      ;      check state
   59 00000070 CA00000C        BGT              negativeNumbers
   60 00000074 E3A01000        LDR              R1, =0      ;      get positive
                                                             fraction of this n
                                                            umber
   61 00000078 EB000043        BL               getFraction
   62 0000007C E1A06003        MOV              R6, R3      ;
   63 00000080 E1A00004        MOV              R0, R4      ;      get exponent
                                                             for number 1
   64 00000084 EB00004A        BL               getExponent
   65 00000088 E1A07003        MOV              R7, R3      ;
   66 0000008C E1A00005        MOV              R0, R5      ;
   67 00000090 E3A01000        LDR              R1, =0      ;      get positive
                                                             fraction of this n
                                                            umber
   68 00000094 EB00003C        BL               getFraction
   69 00000098 E1A08003        MOV              R8, R3      ;
   70 0000009C E1A00005        MOV              R0, R5      ;      get exponent
                                                             for number 2
   71 000000A0 EB000043        BL               getExponent
   72 000000A4 EA00000B        B                endNegativeNumbers
   73 000000A8         negativeNumbers
   74 000000A8 E3A01000        LDR              R1, =0      ;      get positive
                                                             fraction of this n
                                                            umber
   75 000000AC EB000036        BL               getFraction
   76 000000B0 E1A06003        MOV              R6, R3      ;
   77 000000B4 E1A00004        MOV              R0, R4      ;      get exponent
                                                             for number 1
   78 000000B8 EB00003D        BL               getExponent
   79 000000BC E1A07003        MOV              R7, R3      ;
   80 000000C0 E1A00005        MOV              R0, R5      ;



ARM Macro Assembler    Page 3 


   81 000000C4 E3A01001        LDR              R1, =1      ;      get negative
                                                             fraction of this n
                                                            umber
   82 000000C8 EB00002F        BL               getFraction
   83 000000CC E1A08003        MOV              R8, R3      ;
   84 000000D0 E1A00005        MOV              R0, R5      ;      get exponent
                                                             for number 2
   85 000000D4 EB000036        BL               getExponent
   86 000000D8         endNegativeNumbers
   87 000000D8 E1A02003        MOV              R2, R3      ;      num2 exponen
                                                            t
   88 000000DC E1A00008        MOV              R0, R8      ;      num1 exponen
                                                            t
   89 000000E0 E1A03007        MOV              R3, R7      ;      num2 fractio
                                                            n
   90 000000E4 E1A01006        MOV              R1, R6      ;      num1 fractio
                                                            n
   91 000000E8 EB000039        BL               bringToSamePower
   92 000000EC EB000053        BL               addNumbers
   93 000000F0 E1A02009        MOV              R2, R9      ;      
   94 000000F4 EB000074        BL               storeResult
   95 000000F8 E8BD83F0        LDMFD            SP!, {R4-R9, PC}
   96 000000FC         
   97 000000FC         ; getComponents subroutine
   98 000000FC         ; rearranges two floating point numbers based on size
   99 000000FC         ; indicating if the result of their addition will be pos
                       itive
  100 000000FC         ; Parameters:
  101 000000FC         ;   R0: first floating point value
  102 000000FC         ;   R1: second floating point value
  103 000000FC         ; Return value:
  104 000000FC         ;   R0: biggest magnitude floating point number
  105 000000FC         ; R1: smallest magnitude floating point number
  106 000000FC         ;   R3: state of addition
  107 000000FC         getComponents
  108 000000FC E92D40F0        STMFD            SP!, {R4-R7, lr}
  109 00000100 E1A04000        MOV              R4, R0
  110 00000104 E1A05001        MOV              R5, R1
  111 00000108 EB000029        BL               getExponent
  112 0000010C E1A06003        MOV              R6, R3
  113 00000110 E1A00005        MOV              R0, R5
  114 00000114 EB000026        BL               getExponent
  115 00000118 E1A07003        MOV              R7, R3
  116 0000011C E1560007        CMP              R6, R7      ;check which expone
                                                            nt is bigger
  117 00000120 AA000005        BGE              noRearrange
  118 00000124 BAFFFFFF        BLT              needRearrange ;swap numbers to 
                                                            order largest to sm
                                                            allest
  119 00000128         needRearrange
  120 00000128 E1A00005        MOV              R0, R5
  121 0000012C E1A01004        MOV              R1, R4
  122 00000130 E1A04000        MOV              R4, R0
  123 00000134 E1A05001        MOV              R5, R1
  124 00000138 EA000002        B                getSign
  125 0000013C         noRearrange
  126 0000013C E1A00004        MOV              R0, R4
  127 00000140 E1A01005        MOV              R1, R5
  128 00000144 EAFFFFFF        B                getSign



ARM Macro Assembler    Page 4 


  129 00000148         getSign
  130 00000148 E3A06102        LDR              R6, =0x80000000 ;this code will
                                                             determine which si
                                                            gns are required fo
                                                            r the addition
  131 0000014C E0057006        AND              R7, R5, R6  ; no1  | no2  | res
                                                            ult  | state
  132 00000150 E0046006        AND              R6, R4, R6  ;positive |positive
                                                             | positive | 0
  133 00000154 E3560000        CMP              R6, #0      ;negative |negative
                                                             | negative | 1
  134 00000158 0A000005        BEQ              biggerNumberPositive ;positive 
                                                            |negative | positiv
                                                            e | 2
  135 0000015C E3570000        CMP              R7, #0      ;negative |positive
                                                             | negative | 3
  136 00000160 0A000001        BEQ              negPos
  137 00000164 E3A03001        LDR              R3, =1
  138 00000168 EA000006        B                endgetSign
  139 0000016C         negPos
  140 0000016C E3A03003        LDR              R3, =3
  141 00000170 EA000004        B                endgetSign
  142 00000174         biggerNumberPositive
  143 00000174 E3570000        CMP              R7, #0
  144 00000178 1A000001        BNE              posNeg
  145 0000017C E3A03000        LDR              R3, =0
  146 00000180 EA000000        B                endgetSign
  147 00000184         posNeg
  148 00000184 E3A03002        LDR              R3, =2
  149 00000188         endgetSign
  150 00000188 E8BD80F0        LDMFD            SP!, {R4-R7, PC}
  151 0000018C         
  152 0000018C         
  153 0000018C         
  154 0000018C         ;get fraction subroutine
  155 0000018C         ;Parameters
  156 0000018C         ;IEEE 754 number in R0
  157 0000018C         ;sign of number in R1
  158 0000018C         ;returns fraction in R3
  159 0000018C         
  160 0000018C         getFraction
  161 0000018C E92D4070        STMFD            SP!, {R4-R6, lr}
  162 00000190 E59F51A0        LDR              R5, =0x007FFFFF 
                                                            ;mask for fraction
  163 00000194 E0004005        AND              R4, R0, R5  ;get fraction
  164 00000198 E3844502        ORR              R4, R4, #0x00800000 
                                                            ;reintroduce 1
  165 0000019C E3510000        CMP              R1, #0
  166 000001A0 0A000001        BEQ              positive
  167 000001A4 E1E04004        MVN              R4, R4      ;2's complement rep
                                                            resentation for neg
                                                            ative numbers
  168 000001A8 E2844001        ADD              R4, R4, #1
  169 000001AC         positive
  170 000001AC E1A03004        MOV              R3, R4      ;
  171 000001B0 E8BD8070        LDMFD            SP!, {R4-R6, pc}
  172 000001B4         
  173 000001B4         ;get exponent subroutine
  174 000001B4         ;IEEE 754 number in R0



ARM Macro Assembler    Page 5 


  175 000001B4         ;returns exponent in R3
  176 000001B4         
  177 000001B4         getExponent
  178 000001B4 E92D4070        STMFD            SP!, {R4-R6, lr}
  179 000001B8 E59F517C        LDR              R5, =0x7F800000
  180 000001BC E0004005        AND              R4, R0, R5  ;get exponent
  181 000001C0 E1A04BA4        MOV              R4, R4, LSR#23 ;shift to right 
                                                            of register
  182 000001C4 E3A0607F        LDR              R6, =127    ;      
  183 000001C8 E0444006        SUB              R4, R4, R6  ; subtract offset
  184 000001CC E1A03004        MOV              R3, R4
  185 000001D0 E8BD8070        LDMFD            SP!, {R4-R6, pc}
  186 000001D4         
  187 000001D4         ;bringToSamePower subroutine
  188 000001D4         ;takes fractions in R0 & R1
  189 000001D4         ;takes exponents in R2 & R3
  190 000001D4         
  191 000001D4         bringToSamePower
  192 000001D4 E92D41F0        STMFD            SP!, {R4-R8, lr}
  193 000001D8 E1520003        CMP              R2, R3      ; if(num1<num2)
  194 000001DC CA00000B        BGT              numOneBigger
  195 000001E0 E1A04003        MOV              R4, R3      ; R4 = num2 exponen
                                                            t
  196 000001E4 E1A05002        MOV              R5, R2      ; R5 = num1 exponen
                                                            t
  197 000001E8 E1A06001        MOV              R6, R1      ; R6 = num2 fractio
                                                            n
  198 000001EC E1A07000        MOV              R7, R0      ; R7 = num1 fractio
                                                            n
  199 000001F0 E0448005        SUB              R8, R4, R5  ; adjustAmount = bi
                                                            ggerExponent - smal
                                                            lerExponent
  200 000001F4 E1A07837        MOV              R7, R7, LSR R8 ; adjust smaller
                                                             number fraction
  201 000001F8 E0855008        ADD              R5, R5, R8  ; adjust smaller nu
                                                            mber exponent
  202 000001FC E1A02005        MOV              R2, R5      ; return result ens
                                                            uring number of lar
                                                            ger magnitude is fi
                                                            rst
  203 00000200 E1A03004        MOV              R3, R4
  204 00000204 E1A00007        MOV              R0, R7
  205 00000208 E1A01006        MOV              R1, R6
  206 0000020C EA00000A        B                endnumOneBigger
  207 00000210         numOneBigger
  208 00000210 E1A04002        MOV              R4, R2      ; R4 = num1 exponen
                                                            t
  209 00000214 E1A05003        MOV              R5, R3      ; R5 = num2 exponen
                                                            t
  210 00000218 E1A06000        MOV              R6, R0      ; R6 = num1 fractio
                                                            n
  211 0000021C E1A07001        MOV              R7, R1      ; R7 = num2 fractio
                                                            n
  212 00000220 E0448005        SUB              R8, R4, R5  ; adjustAmount = bi
                                                            ggerExponent - smal
                                                            lerExponent
  213 00000224 E1A07837        MOV              R7, R7, LSR R8 ; adjust smaller
                                                             number fraction
  214 00000228 E0855008        ADD              R5, R5, R8  ; adjust smaller nu



ARM Macro Assembler    Page 6 


                                                            mber exponent
  215 0000022C E1A02004        MOV              R2, R4      ; directly return r
                                                            esult
  216 00000230 E1A03005        MOV              R3, R5
  217 00000234 E1A00006        MOV              R0, R6
  218 00000238 E1A01007        MOV              R1, R7
  219 0000023C         endnumOneBigger
  220 0000023C E8BD81F0        LDMFD            SP!, {R4-R8, PC}
  221 00000240         
  222 00000240         ;add numbers subroutine
  223 00000240         ;takes two numbers (exponent and fraction) and adds them
                       
  224 00000240         ;R0 num1 fraction
  225 00000240         ;R1 num2 fraction
  226 00000240         ;R2 num1 exponent
  227 00000240         ;R3 num2 exponent
  228 00000240         
  229 00000240         ;returns result 
  230 00000240         ; R0 - result exponent
  231 00000240         ; R1 - result fraction
  232 00000240         addNumbers
  233 00000240 E92D47F0        STMFD            SP!, {R4-R10 , lr}
  234 00000244 E1A04002        MOV              R4, R2      ; R4 = num1 exponen
                                                            t
  235 00000248 E1A05003        MOV              R5, R3      ; R5 = num2 exponen
                                                            t
  236 0000024C E1A06000        MOV              R6, R0      ; R6 = num1 fractio
                                                            n
  237 00000250 E1A07001        MOV              R7, R1      ; R7 = num2 fractio
                                                            n
  238 00000254 E0868007        ADD              R8, R6, R7  ; num1 + num2
  239 00000258 E3E094FE        LDR              R9, =0x01FFFFFF
  240 0000025C E0088009        AND              R8, R8, R9  ; mask out un-neede
                                                            d bits
  241 00000260 E3A09000        LDR              R9, =0
  242 00000264 E1A0A008        MOV              R10, R8
  243 00000268         countLeadingZeros
  244 00000268 E3590020        CMP              R9, #32     ;   accounts for 0 
                                                            result
  245 0000026C 0A00000E        BEQ              zeroResult
  246 00000270 E1B0A08A        MOVS             R10, R10, LSL#1
  247 00000274 2A000001        BCS              endLeadingZeros
  248 00000278 E2899001        ADD              R9, R9, #1
  249 0000027C EAFFFFF9        B                countLeadingZeros
  250 00000280         endLeadingZeros
  251 00000280 E3A0A008        LDR              R10, =8
  252 00000284 E15A0009        CMP              R10, R9
  253 00000288 BA000003        BLT              leftShift   ; normalises the re
                                                            sult
  254 0000028C E04A9009        SUB              R9, R10, R9 ; gets normalise am
                                                            ount
  255 00000290 E1A08938        MOV              R8, R8, LSR R9 ; shifts by norm
                                                            alise amount
  256 00000294 E0844009        ADD              R4, R4, R9  ; adjusts exponent
  257 00000298 EA000006        B                endShift
  258 0000029C         leftShift
  259 0000029C E049900A        SUB              R9, R9, R10 ; gets normalise am
                                                            ount
  260 000002A0 E1A08918        MOV              R8, R8, LSL R9 ; shifts by norm



ARM Macro Assembler    Page 7 


                                                            alise amount
  261 000002A4 E0444009        SUB              R4, R4, R9  ; adjusts exponent
  262 000002A8 EA000002        B                endShift
  263 000002AC         zeroResult
  264 000002AC E3A00000        LDR              R0, =0      ; store 0 for fract
                                                            ion and exponent if
                                                             result = 0
  265 000002B0 E3A01000        LDR              R1, =0
  266 000002B4 EA000003        B                endaddNumbers
  267 000002B8         endShift
  268 000002B8 E3A0A07F        LDR              R10, =127
  269 000002BC E084400A        ADD              R4, R4, R10
  270 000002C0 E1A00004        MOV              R0, R4
  271 000002C4 E1A01008        MOV              R1, R8
  272 000002C8         endaddNumbers
  273 000002C8 E8BD87F0        LDMFD            sp!, {R4-R10, PC}
  274 000002CC         
  275 000002CC         ;store result subroutine
  276 000002CC         ;R0 = exponent
  277 000002CC         ;R1 = fraction
  278 000002CC         ;R2 = sign of result
  279 000002CC         ;returns result in R0 (ieee 754 form)
  280 000002CC         storeResult
  281 000002CC E92D41F0        STMFD            SP!, {R4-R8, lr}
  282 000002D0 E1A05000        MOV              R5, R0      ; exponent
  283 000002D4 E1A06001        MOV              R6, R1      ; fraction
  284 000002D8 E1A07002        MOV              R7, R2      ; sign of result
  285 000002DC E59F8054        LDR              R8, =0x007FFFFF 
                                                            ;mask for fraction
  286 000002E0 E0066008        AND              R6, R6, R8  ;remove leading 1
  287 000002E4 E1A05B85        MOV              R5, R5, LSL#23 ; shift exponent
                                                             to correct positio
                                                            n
  288 000002E8 E1866005        ORR              R6, R6, R5  ; add in exponents
  289 000002EC E3570000        CMP              R7, #0      ; check sign of res
                                                            ult base on state
  290 000002F0 0A000007        BEQ              posResult
  291 000002F4 E3570001        CMP              R7, #1
  292 000002F8 0A000003        BEQ              negResult
  293 000002FC E3570002        CMP              R7, #2
  294 00000300 0A000003        BEQ              posResult
  295 00000304 E3570003        CMP              R7, #3
  296 00000308 0AFFFFFF        BEQ              negResult
  297 0000030C         negResult
  298 0000030C E3A08102        LDR              R8, =0x80000000
  299 00000310 E1866008        ORR              R6, R6, R8  ; add in sign
  300 00000314         posResult
  301 00000314 E1A00006        MOV              R0, R6
  302 00000318 E8BD81F0        LDMFD            sp!, {R4-R8, PC}
  303 0000031C         
  304 0000031C                 END
              3EE00000 
              40100000 
              BEE00000 
              C0100000 
              414E0000 
              C1F30000 
              40133333 
              007FFFFF 



ARM Macro Assembler    Page 8 


              7F800000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\f
padd.d -o.\fpadd.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC
:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB S
ETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP SET
A 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --predef
ine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\fpadd.lst FpAdd.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FpAdd 00000000

Symbol: FpAdd
   Definitions
      At line 1 in file FpAdd.s
   Uses
      None
Comment: FpAdd unused
addNumbers 00000240

Symbol: addNumbers
   Definitions
      At line 232 in file FpAdd.s
   Uses
      At line 92 in file FpAdd.s
Comment: addNumbers used once
biggerNumberPositive 00000174

Symbol: biggerNumberPositive
   Definitions
      At line 142 in file FpAdd.s
   Uses
      At line 134 in file FpAdd.s
Comment: biggerNumberPositive used once
bringToSamePower 000001D4

Symbol: bringToSamePower
   Definitions
      At line 191 in file FpAdd.s
   Uses
      At line 91 in file FpAdd.s
Comment: bringToSamePower used once
countLeadingZeros 00000268

Symbol: countLeadingZeros
   Definitions
      At line 243 in file FpAdd.s
   Uses
      At line 249 in file FpAdd.s
Comment: countLeadingZeros used once
endLeadingZeros 00000280

Symbol: endLeadingZeros
   Definitions
      At line 250 in file FpAdd.s
   Uses
      At line 247 in file FpAdd.s
Comment: endLeadingZeros used once
endNegativeNumbers 000000D8

Symbol: endNegativeNumbers
   Definitions
      At line 86 in file FpAdd.s
   Uses
      At line 72 in file FpAdd.s
Comment: endNegativeNumbers used once
endShift 000002B8

Symbol: endShift



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 267 in file FpAdd.s
   Uses
      At line 257 in file FpAdd.s
      At line 262 in file FpAdd.s

endaddNumbers 000002C8

Symbol: endaddNumbers
   Definitions
      At line 272 in file FpAdd.s
   Uses
      At line 266 in file FpAdd.s
Comment: endaddNumbers used once
endgetSign 00000188

Symbol: endgetSign
   Definitions
      At line 149 in file FpAdd.s
   Uses
      At line 138 in file FpAdd.s
      At line 141 in file FpAdd.s
      At line 146 in file FpAdd.s

endnumOneBigger 0000023C

Symbol: endnumOneBigger
   Definitions
      At line 219 in file FpAdd.s
   Uses
      At line 206 in file FpAdd.s
Comment: endnumOneBigger used once
fpadd 00000050

Symbol: fpadd
   Definitions
      At line 50 in file FpAdd.s
   Uses
      At line 38 in file FpAdd.s
Comment: fpadd used once
getComponents 000000FC

Symbol: getComponents
   Definitions
      At line 107 in file FpAdd.s
   Uses
      At line 54 in file FpAdd.s
Comment: getComponents used once
getExponent 000001B4

Symbol: getExponent
   Definitions
      At line 177 in file FpAdd.s
   Uses
      At line 64 in file FpAdd.s
      At line 71 in file FpAdd.s
      At line 78 in file FpAdd.s
      At line 85 in file FpAdd.s
      At line 111 in file FpAdd.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 114 in file FpAdd.s

getFraction 0000018C

Symbol: getFraction
   Definitions
      At line 160 in file FpAdd.s
   Uses
      At line 61 in file FpAdd.s
      At line 68 in file FpAdd.s
      At line 75 in file FpAdd.s
      At line 82 in file FpAdd.s

getSign 00000148

Symbol: getSign
   Definitions
      At line 129 in file FpAdd.s
   Uses
      At line 124 in file FpAdd.s
      At line 128 in file FpAdd.s

leftShift 0000029C

Symbol: leftShift
   Definitions
      At line 258 in file FpAdd.s
   Uses
      At line 253 in file FpAdd.s
Comment: leftShift used once
needRearrange 00000128

Symbol: needRearrange
   Definitions
      At line 119 in file FpAdd.s
   Uses
      At line 118 in file FpAdd.s
Comment: needRearrange used once
negPos 0000016C

Symbol: negPos
   Definitions
      At line 139 in file FpAdd.s
   Uses
      At line 136 in file FpAdd.s
Comment: negPos used once
negResult 0000030C

Symbol: negResult
   Definitions
      At line 297 in file FpAdd.s
   Uses
      At line 292 in file FpAdd.s
      At line 296 in file FpAdd.s

negativeNumbers 000000A8

Symbol: negativeNumbers
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 73 in file FpAdd.s
   Uses
      At line 59 in file FpAdd.s
Comment: negativeNumbers used once
noRearrange 0000013C

Symbol: noRearrange
   Definitions
      At line 125 in file FpAdd.s
   Uses
      At line 117 in file FpAdd.s
Comment: noRearrange used once
numOneBigger 00000210

Symbol: numOneBigger
   Definitions
      At line 207 in file FpAdd.s
   Uses
      At line 194 in file FpAdd.s
Comment: numOneBigger used once
posNeg 00000184

Symbol: posNeg
   Definitions
      At line 147 in file FpAdd.s
   Uses
      At line 144 in file FpAdd.s
Comment: posNeg used once
posResult 00000314

Symbol: posResult
   Definitions
      At line 300 in file FpAdd.s
   Uses
      At line 290 in file FpAdd.s
      At line 294 in file FpAdd.s

positive 000001AC

Symbol: positive
   Definitions
      At line 169 in file FpAdd.s
   Uses
      At line 166 in file FpAdd.s
Comment: positive used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file FpAdd.s
   Uses
      At line 3 in file FpAdd.s
Comment: start used once
stop 0000004C

Symbol: stop
   Definitions
      At line 40 in file FpAdd.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 40 in file FpAdd.s
Comment: stop used once
storeResult 000002CC

Symbol: storeResult
   Definitions
      At line 280 in file FpAdd.s
   Uses
      At line 94 in file FpAdd.s
Comment: storeResult used once
zeroResult 000002AC

Symbol: zeroResult
   Definitions
      At line 263 in file FpAdd.s
   Uses
      At line 245 in file FpAdd.s
Comment: zeroResult used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file FpAdd.s
   Uses
      None
Comment: main unused
1 symbol
371 symbols in table
